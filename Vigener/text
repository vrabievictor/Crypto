Intro - de ce PL/SQL
Limbajul SQL este util pentru a face interogări asupra unei baze de date.

De obicei, o aplicaţie (PHP, Java, C# etc.) are nevoie să facă mai multe astfel de interogări ale bazei de date pentru a funcţiona corect. Să presupunem că aceste date preluate de către aplicaţia PHP necesită o anumită prelucrare (fără ca utilizatorul să intervină) după care trebuie să fie scrise înapoi în baza de date. În cazul în care interogările ce trebuie făcute depind una de cealaltă, timpul de transfer a datelor între aplicaţia PHP şi serverul SQL poate deveni prea mare. Fiind un limbaj de scripting ce poate fi executat direct de către serverul Oracle SQL, limbajul PL/SQL vine în soluţionarea acestei probleme (şi nu numai a acesteia: executarea scriptului în locul unde sunt datele va elimina necesitatea transferului pe reţea şi odată cu timpul mai mic de aflare a rezultatelor putem beneficia şi de siguranţa că un posibil atacator nu are acces la datele utilizate).

Un alt exemplu ar fi preluarea datelor (deja) procesate într-un anumit fel din baza de date. Spre exemplu, am putea avea la un moment dat un select de forma:

SELECT CMMDC(val1, val2) FROM cupluri_numere; -- presupunand ca există două câmpuri val1 şi val2 în tabelul cupluri_numere.

Funcţia CMMDC, evident, nu este predefinită în limbajul SQL. Totuşi, construind această funcţie în PL/SQL veţi putea construi interogări de tipul celei de mai sus.

Limbajul PL/SQL a fost dezvoltat de către Oracle la sfârşitul anilor '80 special pentru a ajuta limbajul SQL să devină mai complex fără a forţa totuşi prin crearea unor funcţii care nu ar fi naturale acestui limbaj (spre exemplu, nu are sens implementarea în SQL a unei funcţii CMMDC care ar putea fi folosită doar local de câteva aplicaţii).

O secvenţă de cod PL/SQL poate defini:

un bloc anonim,
o funcţie,
o procedură,
un pachet,
conţinutul unui pachet (body),
un trigger,
un tip (type),
corpul unui tip (type body).
Blocuri anonime
O funcţie are un nume pentru a putea fi apelată. Acestea sunt salvate în baza de date şi sunt utilizate ori de câte ori sunt apelate. Blocurile anonime sunt secvenţe de cod PL/SQL ce nu au un nume. Blocurile anonime pot fi executate din fişierele în care au fost scrise fără a fi reţinute de SGBD.

Un cod anonim este format din trei secţiuni:

Secţiunea declarativă - în care sunt declarate variabilele împreună cu tipul lor de date şi eventual o iniţializare. Tot aici pot fi declarate constante, cursoare (despre care se va studia într-un laborator viitor) sau excepţiile. Secţiunea declarativă începe prin cuvântul-cheie DECLARE
Secţiunea executabilă - conţine instrucţiuni SQL sau PL/SQL necesare pentru manipularea informaţiilor din baza de date. Secţiunea executabilă începe prin cuvântul BEGIN şi se termină cu END; (END urmat de caracterul punct şi virgulă).
Secţiunea de excepţii - atunci când codul din secţiunea executabilă produce erori, în această secţiune pot fi scrise secvenţe de cod ce tratează aceste execepţii. Secţiunea de excepţii face parte din secţiunea de cod executabil, este scrisă în partea finală a acestuia şi începe prin utilizarea cuvnâtului cheie EXCEPTION

Dintre cele trei blocuri, singurul care este obligatoriu este cel din secţiunea executabilă.

Cateva exemple:

BEGIN
   DBMS_OUTPUT.PUT_LINE('Maine:' || (SYSDATE+1));
END;


set serveroutput on;
DECLARE
      v_mesaj VARCHAR2(50) := 'Salutare, lume !';
BEGIN
      DBMS_OUTPUT.PUT_LINE('Mesaj: ' || v_mesaj);
END;
La începutul blocului anonim de mai sus a fost pusă comanda set serveroutput on; fără de care serverul SGBD va ignora comenzile de afişare - în fond, un server de baze de date trebuie să ofere informaţii unui client şi nu să afişeze mesaje în consolă. Blocul anonim începe aşadar cu o secţiune DECLARE în care este trecută singura variabilă utilizată împreună cu tipul ei, urmează secţiunea executabilă în care această valoare este utilizată (afişată). Pachetul de comenzi DBMS_OUTPUT este special creat pentru a vă ajuta în operaţiile de debug (https://docs.oracle.com/cd/B19306_01/appdev.102/b14258/d_output.htm#BABJCAJA). Deocamdată, din acest pachet am utilizat doar comanda PUT_LINE care are rolul de a afişa informaţia primită ca parametru.

Declararea variabilelor
Sintaxa de declarare a variabilelor este

Identificator [CONSTANT] tipdedate [NOT NULL]
     [:= expr | DEFAULT expresie]
Identificatorul - numele variabilei. Identificatorul trebuie neapărat să înceapă cu un caracter după care pot urma alte litere, cifre, semnul dolar($), diez(#) sau semnul underscore(_) şi nu trebuie să depăşească 30 de caractere. Dacă numele variabilei este format din mai multe cuvinte, acestea vor fi despărţite prin underscore(underline, liniuta de subliniere, talpă - caracterul "_"). Standardul precizează că variabilele vor începe cu "v_", constantele vor începe cu "c_" şi parametri ce au fost primiţi într-o funcţie sau procedură vor începe cu "p_". Predefinit, numele variabilelor nu este case-sensitive dar nu puteţi utiliza cuvinte cheie ale limbajului drept variabile (ALL, CREATE, FROM, MODIFY, SELECT, ALTER, DATE, GROUP, NOT, SYNONYM, AND, DEFAULT, HAVING, NULL, SYSDATE, ANY, DELETE, IN, NUMBER, TABLE, AS, DESC, INDEX, OR, THEN, ASC, DISTINCT, INSERT, ORDER, UPDATE, BETWEEN, DROP, INTEGER, RENAME, VALUES, CHAR, ELSE, INTO, ROW, VARCHAR2, COLUMN, EXISTS, IS, ROWID, VIEW, COMMENT, FOR, LIKE, ROWNUM, WHERE).

Atenţie: denumiţi variabilele cât mai sugestiv, altfel nu ne vom uita pe codul vostru !


CONSTANT - este cuvântul cheie utilizat atunci când variabila declarată este o constantă. Aceasta va fi iniţializată în blocul de declarare şi nu va putea fi modificată niciodată.


Tipul de date - Tipurile de date utilizate în limbajul PL/SQL pot fi scalare, compuse, referinţe, obiecte, LOB (Large object).

Tipurile de date scalare sunt cele ce sunt utilizate şi de către limbajul SQL (vezi http://profs.info.uaic.ro/~bd/wiki/index.php/Laboratorul_2, http://docs.oracle.com/cd/B19306_01/server.102/b14200/sql_elements001.htm sau http://cursuri.cs.pub.ro/~radulescu/bd/plsql/2.html pentru detalii).
Tipurile de date compuse pot avea o structură internă şi conţine mai multe date de tip scalar (spre exemplu şiruri de caractere sau un rand dintr-o tabelă: TABLE, RECORD, NESTED TABLE, VARRAY - despre acestea vom discuta într-un laborator viitor).
Tipurile de date de tip referinţă conţin pointeri către zone în care sunt stocate valori.
Tipul obiect este asemănătoar cu cel din OOP.
Tipurile de date de tip LOB (pot fi Character Large Object - CLOB, Binary large object - BLOB, Binary file - BFILE, National language character large object -NCLOB). Datele de tip LOB pot reţine blocuri de date nestructurate de până la 4GB.
În cadrul tipului de date este inclusă şi constrângerea asupra tipului de date. De exemplu, pentru a declara o variabilă de tip VARCHAR2 ce poate conţine maxim 25 de caractere, se va utiliza VARCHAR2(25) ca şi tip de variabilă.


NOT NULL - pentru a face o constrângere asupra variabilelor care nu au voie să fie nule. Aceste variabile trebuie să fie iniţializate (pentru că altfel ar avea valoarea NULL).


:= - atribuie o valoare variabilei respective. Valoarea poate fi şi rezultatul evaluării unei expresii. Valoarea predefinită a unei variabile care nu este iniţializată este NULL. Dacă se doreşte iniţializarea cu altceva decât cu NULL, se va utiliza cuvântul cheie DEFAULT.

Este recomandat (good programming practices) ca variabilele pe care le declaraţi să fie iniţializate.


Exemple declaraţii de variabile:

v_#cartofi NUMBER := 2E4; --20000 de cartofi

v_varsta int := &i_varsta; --preluarea varstei de la tastatura in momentul rularii codului

v_nume_film VARCHAR2(30) := 'The Matrix';

c_pi CONSTANT double precision := 3.141592653;

v_salut VARCHAR2(40) DEFAULT 'Bine ati venit!';

v_data_de_nastere DATE;

v_numar_studenti NUMBER(3) NOT NULL := 1;

v_promovam_la_PSGBD BOOLEAN DEFAULT TRUE;

Recomandari: Pentru a fi mai uşor de citit, se recomanda declararea fiecărei variabile pe câte o linie diferită (good practices). Evitaţi să folosiţi nume de coloane ca şi variabile.

Domeniul de vizibilitate a unei variabile (Scope)
Variabilele declarate la începutul codului PL/SQL sunt considerate variabile globale. În interiorul secţiunii executabile, pot exista secţiuni de tip declare, de această dată, însă, variabilele declarate vor putea fi accesate doar în următorul cod BEGIN-END.


Spre exemplu, executaţi următorul cod PL/SQL:

set serveroutput on;
DECLARE
   v_nume VARCHAR2(20):='Cristi';
   v_varsta INTEGER:= 21;  -- INTEGER este un alias pentru NUMBER(38,0).
BEGIN
   DBMS_OUTPUT.PUT_LINE('Valoarea variabilei v_nume este: ' || v_nume);  -- va afisa 'Cristi'
   DECLARE
      v_nume NUMBER(3) := 5;
   BEGIN
         DBMS_OUTPUT.PUT_LINE('Valoarea variabilei v_nume este: ' || v_nume); -- va afisa 5
         DBMS_OUTPUT.PUT_LINE('Varsta este: ' || v_varsta); -- va afisa 21
   END;
   DBMS_OUTPUT.PUT_LINE('Valoarea variabilei v_nume este: ' || v_nume); -- va afisa 'Cristi'
END;

Variabilele globale pot fi accesate şi în blocurile interioare.

Pentru a putea accesa variabilele globale şi în interiorul zonelor în care sunt variabile locale cu acelaşi nume, zona globală va fi etichetată utilizând metoda de marcare "<< marcator >>".

Spre exemplu, pentru a accesa valoarea variabilei globale din codul de mai sus, putem reface blocul anonim în modul următor:

<<global>>
DECLARE
   v_nume VARCHAR2(20):='Cristi';
BEGIN
   DBMS_OUTPUT.PUT_LINE('Valoarea variabilei v_nume este: ' || v_nume);  -- va afisa 'Cristi'
   DECLARE
      v_nume NUMBER(3) := 5;
   BEGIN
         DBMS_OUTPUT.PUT_LINE('Valoarea variabilei v_nume este: ' || v_nume); -- va afisa 5
         DBMS_OUTPUT.PUT_LINE('Valoarea variabilei v_nume este: ' || global.v_nume); -- va afisa 'Cristi'
   END;
   DBMS_OUTPUT.PUT_LINE('Valoarea variabilei v_nume este: ' || v_nume); -- va afisa 'Cristi'
END;
Pentru a diferentia intre variabilele globale si cele locale, putem prefixa cu "g_" respectiv cu "l_"

Operatori
Pentru a atribui o nouă valoare unei variabile, se va utiliza operatorul := (simbolul două puncte urmat de simbolul egal).

În cazul şirilor de caractere, acestea pot fi scrise pe mai multe rânduri:

DECLARE
   v_text VARCHAR2(200);
BEGIN   
   v_text := 'La steaua care a rasarit 
E-o cale atit de lunga,
Ca mii de ani i-au trebuit,
Luminii, sa ne-ajunga';
   DBMS_OUTPUT.PUT_LINE(v_text);   
END;
Operatorii sunt de mai multe tipuri:

operatori aritmetici,
operatori relaţionali,
operatori de comparaţie,
operatori logici,
operatori pe şiruri de caractere.
Aceşti operatori sunt deja cunoscuţi din studierea limbajului SQL, pentru a vi-i reaminiti, încercaţi să executaţi fiecare dintre blocurile anonime următoare:


Pentru operatorii aritmetici (+, -, *, /, **):

set serveroutput on;
DECLARE
   a NUMBER := 10;
   b NUMBER := 4;
BEGIN
   DBMS_OUTPUT.PUT_LINE('Suma: ' || (a+b));
   DBMS_OUTPUT.PUT_LINE('Diferenta: ' || (a-b));
   DBMS_OUTPUT.PUT_LINE('Produsul: ' || (a*b));
   DBMS_OUTPUT.PUT_LINE('Impartirea: ' || (a/b));
   DBMS_OUTPUT.PUT_LINE('Exponentierea: ' || (a ** b)); -- nu exista in SQL
END;
  
Pentru operatorii relationali (!=, <>, ~=, <, >, <=, >=) :

set serveroutput on;
DECLARE
   a NUMBER := 10;
   b NUMBER := 4;
BEGIN
   IF (a>b) 
      THEN DBMS_OUTPUT.PUT_LINE(a || '>' || b);
      ELSE DBMS_OUTPUT.PUT_LINE(b || '>=' || a);
   END IF;
   IF (a != b) -- se poate utiliza si <> sau ~=
      THEN DBMS_OUTPUT.PUT_LINE('Cele doua valori sunt diferite.');
      ELSE DBMS_OUTPUT.PUT_LINE('Cele doua valori sunt egale');
   END IF;   
END;
Pentru operatorii de comparaţie (LIKE, BETWEEN, IN, IS NULL):

set serveroutput on;
DECLARE
   a NUMBER := TRUNC(DBMS_RANDOM.VALUE(0,100)); -- eliminati atribuirea pentru a fi NULL;
BEGIN
   IF (a IS NOT NULL) 
      THEN 
         IF (a BETWEEN 20 AND 80)
              THEN DBMS_OUTPUT.PUT_LINE(a || ' este intre 20 si 80');
              ELSE DBMS_OUTPUT.PUT_LINE(a || ' NU este intre 20 si 80');
         END IF;     
      ELSE DBMS_OUTPUT.PUT_LINE('Valoare nula');
   END IF;
END;
Pentru operatorii logici (AND, OR, NOT): Inlocuiti conditia cu BETWEEN, utilizând operatorii de comparaţie şi pe cei logici, pentru ca blocul anonim sa aibă acelaşi efect.

Precedenţa operatorilor este cea cunoscută din alte limbaje de programare.

Comentarii
În toate limbajele de programare comentariile sunt binevenite: pentru a explica ce face o anumita sectiune de cod, pentru a va aminti dupa un timp ce aţi vrut să faceţi într-o anumită zonă a programului, sau pentru a explica unui programator ce va programa plecând de la codul vostru ce aţi vrut să faceţi acolo. Este recomandat (good practices) să comentaţi codul pe care îl scrieţi.

Comentariile sunt ignorate de către interpretorul codului PL/SQL.

În PL/SQL comentariile pe o singură linie încep cu -- (de două ori simbolul minus), iar comentariile pe mai multe linii sunt delimitate de /* ... */.

Preluarea unei singure valori dintr-un tabel
Pentru a prelua informaţii dintr-un tabel se foloseste comanda SELECT (specifică limbajului SQL). Există câteva posibiltăţi de răspuns (înafara cazului in care vă dă o eroare pentru că nu aţi scris greşit comanda sau nu există tabelul).

Sunt returnate mai multe rânduri: pentru a le prelua unul câte unul şi pentru a le procesa, se vor folosi cursoare despre care veţi învăţa în laboratorul următor.
Nu este returnată nici o înregistrare: caz acoperit de asemenea de laboratorul următor.
Este returnat un singur rând - acest caz îl vom discuta în continuare.
Dacă este întors un singur rând, valorile acestuia pot fi stocate în variabilele existente în blocul anonim, suprascriindu-se valorile deja existente. Pentru a face această operaţie, comanda SELECT trebuie modificată pentru a include şi numele variabilelor în care se face stocarea. Se va utiliza aşadar cuvântul cheie INTO pentru a face o asociere dintre valorile returnate şi variabilele în care acestea vor fi stocate.

Exemplu:

SELECT nume INTO v_nume FROM studenti WHERE ROWNUM=1

În exemplul de mai sus s-a stocat numele primului student în variabila v_nume. Pentru a ne asigura că nu sunt pot fi returnate mai multe rânduri, s-a folosit clauza ROWNUM=1.

Dacă se foloseşte o funcţie de agregare peste întreaga tabelă, puteţi fi siguri că aceasta va returna doar o singură valoare. De exemplu, următoarea instrucţiune este corectă:

SELECT AVG(valoare) INTO v_medie FROM note

Dacă doriţi să preluaţi simultan mai multe valori din rândul returnat, câmpurile vor fi delimitate cu virgulă şi la fel vor fi delimitate si numele variabilelor în care vor fi introduse valorile:

SELECT nume, prenume INTO v_nume, v_prenume FROM studenti WHERE ROWNUM=1 --se preiau valorile a doua câmpuri in doua variabile diferite


Dacă răspunsul este format dintr-o singură înregistrare, folositi mereu SELECT... INTO...

Puteţi selecta şi toate coloanele ale unui rând în acest mod, dar despre cum se face acest lucru vom discuta într-un laborator viitor.

Declararea variabilelor utilizand %TYPE
Asa cum am vazut, pentru a prelua o valoare dintr-un tabel, va fi utilizată o comandă de tip SELECT puţin modificată pentru a specifica şi variabila în care se doreşte preluarea acelei informaţii.

Spre exemplu, pentru a prelua nota maximă avută de un student în variabila v_valoare_nota_maxima, vom utiliza următorul select:

SELECT MAX(valoare) INTO v_valoare_nota_maxima FROM note;

Problema pe care o avem totuşi este tipul datei returnate de comanda SELECT. Este ea de acelaşi tip cu cea a variabilei v_valoare_nota_maxima ? (de exemplu, daca variabila a fost declarata ca fiind una de tip intreg si valoarea returnată de interogare este una reală atunci putem avea pierderi de informatii). Pentru a ne asigura că tipul variabilei este acelaşi cu cel al câmpului valoare din tabela note putem utiliza o construcţie de tipul %TYPE. Într-o astfel de declaraţie tipul variabilei nu este cunoscut a-priori ci va avea acelasi tip cu tipul declarat pentru coloana referită.

Declaraţia este aşadar:

v_valoare_nota_maxima note.valoare%TYPE;


iar codul anonim scris în întregime:

DECLARE
   v_valoare_nota_maxima note.valoare%TYPE;
BEGIN   
   SELECT MAX(valoare) INTO v_valoare_nota_maxima FROM note; 
   DBMS_OUTPUT.PUT_LINE('Nota maxima: ' || v_valoare_nota_maxima);
END;
Utilizarea lui %TYPE mai are un avantaj: dacă la un moment dat modificaţi tipul datelor din tabelă (pentru că, spre exemplu, aţi ajuns la un număr de 999 de utilizatori şi iniţial aţi declarat câmpul user_id ca având maxim 3 cifre) atunci codurile PL/SQL vor fi în continuare funcţionale. În cazul în care codul PL/SQL nu mai este valid după modificarea in tabelă (de exemplu pentru că se aştepta ca toate IDurile să fie mai mici decât 999), acesta va semnala o eroare.

Atunci când utilizaţi %TYPE este bine ca variabila să fie prefixată cu numele tabelei şi a coloanei (vă va fi mai uşor să o urmăriţi in cod).

Puteţi declara o variabilă pentru a avea acelaşi tip cu cel avut de altă variabilă.

De exemplu, pentru a prelua valoarea minimă a notei se poate declara o variabila v_valoare_minima_nota în felul următor:

v_valoare_nota_minima v_valoare_nota_maxima%TYPE;

Rescrieţi codul pentru a fi afişate atât nota minimă cât şi cea maximă.

Utilizarea lui %TYPE este probabil cea mai importanta recomandare din acest laborator.... Declarati variabilele in acest mod ori de cate ori aveti de gand sa selectati o valoare dintr-o coloana !

Funcţii predefinite
Funcţiile predefinite pentru anumite tipuri de date le-aţi învăţat deja în timpul laboratorului de SQL.

Un mic review (care nu conţine toate funcţiile):

Funcţii pentru şiruri de caractere: ASCII, LENGTH, RPAD,CHR, LOWER, RTRIM,CONCAT, LPAD, SUBSTR, INITCAP, LTRIM, TRIM,INSTR, REPLACE, UPPER.

Funcţii pentru numere: ABS, EXP, ROUND, ACOS, LN, SIGN, ASIN, LOG, SIN, ATAN, MOD, TAN, COS, POWER, TRUNC.

Funcţii pentru variabile de tip DATE: ADD_MONTHS, MONTHS_BETWEEN, CURRENT_DATE, ROUND, CURRENT_TIMESTAMP, SYSDATE, LAST_DAY, TRUNC.

Conversii de date
Se face automat conversia intre varchar2 şi toate celelalte tipuri de date, de la o variabila de tip DATE, NUMBER sau PLS_INTEGER la LONG (dar nu si invers: LONG este mai mare, poate tine minte numere mai mari care s-ar pierde dacă ar fi convertite în NUMBER spre exemplu). De la NUMBER la PLS_INTEGER şi invers. Date nu poate fi convertit automat în NUMBER sau PLS_INTEGER.

Atenţie: conversiile implicite pot fi mai încete şi pot depinde de sistemul de operare (de exemplu date poate fi convertit in varchar2 în feluri diferite daca este aleasă conversia implicită). Codul ce utilizează conversiile implicite este mai greu de înţeles.

Conversiile explicite de date se realizează cu următoarele funcţii: TO_NUMBER(), ROWIDTONCHAR(), TO_CHAR(), HEXTORAW(), TO_CLOB(), RAWTOHEX(), CHARTOROWID(), RAWTONHEX(), ROWIDTOCHAR(), TO_DATE().

De exemplu:

BEGIN
     DBMS_OUTPUT.PUT_LINE(TO_CHAR(SYSDATE,'Month DD, YYYY'));
END;
